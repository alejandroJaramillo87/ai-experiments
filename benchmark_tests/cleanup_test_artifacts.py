#!/usr/bin/env python3
"""
Test Artifact Cleanup Tool
Cleans up directories and files left behind by test runs in benchmark_tests/

This script removes:
- Empty test flag directories (test_flags/, custom_flags/, test_integration_flags/)
- JSON result files from analysis scripts
- Any other test artifacts

Author: Claude Code
Version: 1.0.0
"""

import os
import shutil
import glob
from pathlib import Path


def remove_empty_directories():
    """Remove empty test flag directories created during test runs."""
    empty_dirs_removed = []
    test_flag_patterns = [
        "test_flags",
        "custom_flags", 
        "test_integration_flags"
    ]
    
    for pattern in test_flag_patterns:
        if os.path.exists(pattern):
            try:
                # Check if directory is empty or contains only empty subdirs
                if is_directory_empty_recursive(pattern):
                    shutil.rmtree(pattern)
                    empty_dirs_removed.append(pattern)
                    print(f"âœ“ Removed empty directory: {pattern}/")
            except Exception as e:
                print(f"âœ— Failed to remove {pattern}/: {e}")
    
    return empty_dirs_removed


def is_directory_empty_recursive(directory):
    """Check if directory is empty or contains only empty subdirectories."""
    path = Path(directory)
    if not path.exists():
        return False
    
    for item in path.rglob("*"):
        if item.is_file():
            return False
        # If we find a non-empty directory, return False
        if item.is_dir() and any(item.iterdir()):
            # Check if this directory has actual files (not just more empty dirs)
            for subitem in item.rglob("*"):
                if subitem.is_file():
                    return False
    
    return True


def remove_test_result_files():
    """Remove JSON and CSV result files generated by test runs."""
    result_files_removed = []
    
    # Known test result files
    test_result_patterns = [
        "scoring_pattern_analysis.json",
        "validation_results.json", 
        "edge_case_test_results.json",
        "*.json",  # Generic JSON files in root
        "*.csv"    # Generic CSV files in root
    ]
    
    for pattern in test_result_patterns:
        files = glob.glob(pattern)
        for file_path in files:
            # Only remove files in the root directory, not subdirectories
            if os.path.dirname(file_path) == "" and os.path.isfile(file_path):
                try:
                    # Check if it's a test result file (simple heuristic)
                    if should_remove_file(file_path):
                        os.remove(file_path)
                        result_files_removed.append(file_path)
                        print(f"âœ“ Removed test result file: {file_path}")
                except Exception as e:
                    print(f"âœ— Failed to remove {file_path}: {e}")
    
    return result_files_removed


def should_remove_file(file_path):
    """Determine if a file should be removed as a test artifact."""
    # List of known test result files
    known_test_files = [
        "scoring_pattern_analysis.json",
        "validation_results.json",
        "edge_case_test_results.json"
    ]
    
    filename = os.path.basename(file_path)
    
    # Always remove known test result files
    if filename in known_test_files:
        return True
    
    # Remove JSON files that look like test results
    if filename.endswith('.json'):
        test_indicators = ['test_results', 'analysis', 'validation', 'scoring', 'edge_case']
        return any(indicator in filename.lower() for indicator in test_indicators)
    
    # Don't remove other files by default
    return False


def clean_pytest_cache():
    """Remove pytest cache directories."""
    cache_dirs_removed = []
    cache_patterns = [
        ".pytest_cache",
        "__pycache__"
    ]
    
    for pattern in cache_patterns:
        for cache_dir in glob.glob(f"**/{pattern}", recursive=True):
            try:
                shutil.rmtree(cache_dir)
                cache_dirs_removed.append(cache_dir)
                print(f"âœ“ Removed cache directory: {cache_dir}")
            except Exception as e:
                print(f"âœ— Failed to remove {cache_dir}: {e}")
    
    return cache_dirs_removed


def main():
    """Main cleanup function."""
    print("ðŸ§¹ BENCHMARK TESTS CLEANUP")
    print("=" * 50)
    
    # Change to benchmark_tests directory
    script_dir = os.path.dirname(os.path.abspath(__file__))
    os.chdir(script_dir)
    
    total_removed = 0
    
    # Remove empty test directories
    empty_dirs = remove_empty_directories()
    total_removed += len(empty_dirs)
    
    # Remove test result files
    result_files = remove_test_result_files()
    total_removed += len(result_files)
    
    # Clean pytest cache (optional, usually small)
    cache_dirs = clean_pytest_cache()
    total_removed += len(cache_dirs)
    
    print("\n" + "=" * 50)
    print("ðŸŽ¯ CLEANUP SUMMARY")
    print("=" * 50)
    
    if total_removed > 0:
        print(f"âœ… Successfully removed {total_removed} test artifacts:")
        if empty_dirs:
            print(f"   - {len(empty_dirs)} empty directories")
        if result_files:
            print(f"   - {len(result_files)} result files")
        if cache_dirs:
            print(f"   - {len(cache_dirs)} cache directories")
    else:
        print("âœ¨ No test artifacts found - directory is already clean!")
    
    print("\nðŸŽ‰ Cleanup complete!")


if __name__ == "__main__":
    main()