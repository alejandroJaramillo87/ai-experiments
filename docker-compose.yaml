version: '3.9'

services:
  llama-cpu:
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - IPC_LOCK
    deploy:
      resources:
        limits:
          cpus: '12' 
          memory: 96G # Increased for single high-performance instance
    ulimits:
      memlock:
        soft: -1
        hard: -1
    build:
      context: .
      dockerfile: docker/llama-cpu/Dockerfile.llama-cpu
    container_name: llama-cpu # Single latency-optimized CPU inference
    restart: unless-stopped
    cpuset: "0-11" 
    environment:
      - SERVER_PORT=8001
      # Model path - wrapper will transparently use huge pages for models > 1GB
      - MODEL_PATH=${LLAMA_CPU_MODEL}
      - THREADS=12 # 12 threads for optimal performance
      - THREADS_BATCH=12
    ports:
      # Exposing the API port to the host for direct access/testing
      - "127.0.0.1:8001:8001"
    read_only: true 
    volumes:
      # Mount your GGUF models from a persistent location (read-only)
      - /mnt/ai-data/models/:/app/models:ro
      # Volume for logs, matching the GPU service pattern
      - ./logs/cpu:/app/logs
    networks:
      - ai-network
    # The command to start the server, reading the model from the mounted volume
    healthcheck:
      # Healthcheck defined at the service level, just like the GPU service
      test: ["CMD", "curl", "-f", "http://localhost:8001/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s # Give the CPU model time to load into RAM

  llama-gpu:
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    ulimits:
      memlock:
        soft: -1
        hard: -1
    build:
      context: .
      dockerfile: docker/Dockerfile.llama-gpu
    container_name: llama-gpu
    restart: unless-stopped
    # runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=0
      - CUDA_VISIBLE_DEVICES=0
      - MODEL_PATH=${LLAMA_GPU_MODEL}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu, compute, utility]
    ports:
      # Exposing the GPU API port to the host for direct access/testing
      - "127.0.0.1:8004:8004"
    read_only: true
    tmpfs:
      - /tmp:size=4G,mode=1777  # CUDA cache and temp files
    volumes:
      # Mount your GGUF models from a persistent location (read-only)
      - /mnt/ai-data/models/:/app/models:ro
      # Volume for logs
      - ./logs/gpu:/app/logs
    networks:
      - ai-network
    healthcheck:
      # Healthcheck for GPU service
      test: ["CMD", "curl", "-f", "http://localhost:8004/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s # Give the GPU model time to load into VRAM 

  # vLLM GPU Service - Optimized for RTX 5090
  vllm-gpu:
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    ulimits:
      memlock:
        soft: -1
        hard: -1
    build:
      context: .
      dockerfile: docker/Dockerfile.vllm-gpu
    container_name: vllm-gpu
    restart: unless-stopped
    environment:
      - NVIDIA_VISIBLE_DEVICES=0
      - CUDA_VISIBLE_DEVICES=0
      - MODEL_PATH=${VLLM_GPU_MODEL}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu, compute, utility]
    ports:
      # Exposing the vLLM API port to the host
      - "127.0.0.1:8005:8005"
    read_only: true
    tmpfs:
      - /tmp:size=4G,mode=1777  # For CUDA cache and temp files
    volumes:
      # Mount your models from a persistent location (read-only)
      - /mnt/ai-data/models/:/app/models:ro
      # Volume for logs
      - ./logs/vllm:/app/logs
    networks:
      - ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 300s # vLLM needs time to load the model

  
  # Open WebUI Service
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    restart: unless-stopped
    ports:
      - "3000:8080" # Access WebUI from http://localhost:3000
    read_only: true 
    volumes:
      - open-webui-data:/app/backend/data
    networks:
      - ai-network
    # This tells Open WebUI how to find and configure the backend model
    environment:
      # Set the base URL for the OpenAI-compatible API
      - 'OPENAI_API_BASE_URL=http://llama-gpu:8006/v1'
      # Since the API is internal to Docker, no key is needed
      - 'OPENAI_API_KEY=NONE'
      # Automatically import the model configuration into Open WebUI on startup
      - 'WEBUI_IMPORTS=[{"name":"qwen3 coder","model":"qwen3 coder","baseURL":"http://llama-gpu:8006/v1","apiKey":"NONE"}]'
    # depends_on:
    #   llama-gpu:
    #     condition: service_healthy # Wait for the GPU service to be healthy before starting

# Define a shared volume for Open WebUI data
volumes:
  open-webui-data:

# Define the internal network for services to communicate
networks:
  ai-network:
    driver: bridge
    internal: false # Set to false to allow pulling images, can be true in production
    ipam:
      config:
        - subnet: 172.20.0.0/16


