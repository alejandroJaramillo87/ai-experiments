# Stage 1: Builder
# Compiles CUDA-optimized llama.cpp server executable for RTX 5090
FROM nvidia/cuda:13.0.1-devel-ubuntu24.04 AS builder

LABEL stage="builder"

# Set build environment variables for NVIDIA RTX 5090 (Blackwell architecture)
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV CUDA_DOCKER_ARCH=sm_120 
ENV TORCH_CUDA_ARCH_LIST="12.0"
ENV CUDA_ARCHITECTURES=120
ENV CUDAFLAGS="-O3 --use_fast_math -arch=sm_120"
ENV LDFLAGS="-Wl,-O3 -Wl,--as-needed -L/usr/local/cuda/lib64/stubs"


# Install specific CUDA components for optimal performance
RUN apt-get update && \
    apt-get install -y --no-install-recommends --allow-change-held-packages \
        gcc g++ build-essential cmake git curl ca-certificates \
        libssl-dev pkg-config python3 python3-pip \
        ninja-build ccache \
        cuda-driver-dev-13-0 \
        cuda-cudart-dev-13-0 \
        cuda-cupti-dev-13-0 \
        cuda-nvml-dev-13-0 \
        cuda-nvtx-13-0 \
        cudnn9-cuda-13-0 \
        libcublas-dev-13-0 && \
    rm -rf /var/lib/apt/lists/*

# Set CUDA environment variables
ENV PATH=/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:/usr/local/cuda/lib64:${LD_LIBRARY_PATH}
ENV CUDA_HOME=/usr/local/cuda
ENV PKG_CONFIG_PATH=/usr/local/cuda/lib64/pkgconfig:${PKG_CONFIG_PATH}

# CUDA runtime optimization settings
ENV CUDA_MODULE_LOADING=LAZY
ENV CUDA_DEVICE_ORDER=FASTEST_FIRST

# Create libcuda.so.1 symlink required for CUDA stub library compatibility
RUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1


# Build llama.cpp with CUDA optimizations
# Full clone used to ensure all build dependencies and submodules are available
RUN rm -rf /tmp/llama.cpp && \
    git clone https://github.com/ggerganov/llama.cpp.git /tmp/llama.cpp && \
    cd /tmp/llama.cpp && \
    mkdir build && cd build && \
    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc \
        -DCMAKE_CUDA_ARCHITECTURES=120 \
        -DCMAKE_SHARED_LINKER_FLAGS="-L/usr/local/cuda/lib64/stubs" \
        -DGGML_CUDA=ON \
        -DGGML_CUDA_FORCE_CUBLAS=ON \
        -DGGML_CUDA_F16=ON \
        -DGGML_CUDA_GRAPHS=ON \
        -DGGML_CUDA_PEER_MAX_BATCH_SIZE=256 \
        -DGGML_CUDA_NO_VMM=OFF \
        -DGGML_NATIVE=ON \
        -DGGML_LTO=ON \
        -DGGML_BUILD_TESTS=OFF \
        -DGGML_BUILD_EXAMPLES=OFF \
        -DLLAMA_CURL=OFF \
        -DGGML_CCACHE=ON \
        -DGGML_CUDA_DMMV_X=64 \
        -DGGML_CUDA_MMV_Y=2 \
        -DGGML_CUDA_GRAPHS=ON \
        -DGGML_CUDA_KQUANTS_ITER=2  \
         -DGGML_CUDA_FA_ALL_QUANTS=ON && \
     cmake --build . --target llama-server --config Release -j$(nproc)


# Stage 2: Runtime Image
FROM nvidia/cuda:13.0.1-runtime-ubuntu24.04

LABEL description="Container for running the CUDA-accelerated llama.cpp REST API server."

# Install only the necessary RUNTIME system libraries
RUN apt-get update && \
    apt-get install -y --no-install-recommends --allow-change-held-packages \
        ca-certificates \
        libgomp1 \
        cudnn9-cuda-13-0 \
        libcublas-13-0 \
        cuda-driver-dev-13-0 \
        cuda-cupti-13-0 \
        cuda-nvtx-13-0 && \
    rm -rf /var/lib/apt/lists/*



# Set runtime CUDA environment
ENV PATH=/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:${LD_LIBRARY_PATH}
ENV CUDA_MODULE_LOADING=LAZY
ENV CUDA_DEVICE_ORDER=FASTEST_FIRST
ENV CUDA_VISIBLE_DEVICES=0

# Performance tuning for RTX 5090 (Blackwell, 32GB VRAM)
ENV CUDA_LAUNCH_BLOCKING=0
ENV CUDNN_LOGINFO_DBG=0
ENV CUDNN_LOGDEST_DBG=stderr
ENV CUDA_CACHE_DISABLE=0
ENV CUDA_CACHE_PATH=/tmp/cuda_cache
ENV CUDA_FORCE_PTX_JIT=0
# Enable CUDA graphs for improved performance
ENV GGML_CUDA_GRAPHS=1
# Optimize for single stream processing
ENV GGML_CUDA_MAX_STREAMS=1
# Force synchronous operations for lower latency
ENV GGML_CUDA_FORCE_SYNC=0


# NVIDIA GPU settings
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,graphics
ENV NVIDIA_REQUIRE_CUDA="cuda>=13.0"

# Create a non-root user with a dedicated group and home directory
RUN groupadd -r appuser && useradd -r -g appuser -d /app -s /sbin/nologin -c "Application User" appuser

# Switch to the non-root user
USER appuser

WORKDIR /app

# Copy the server executable from the builder stage
COPY --from=builder --chown=appuser:appuser /tmp/llama.cpp/build/bin/llama-server /app/server
COPY --from=builder --chown=appuser:appuser /tmp/llama.cpp/build/bin/* /app/

# Copy entrypoint script and ensure it's executable
COPY --chown=appuser:appuser docker/llama-gpu/entrypoint.sh /app/entrypoint.sh

# Create cache directory
RUN mkdir -p /tmp/cuda_cache

# Switch back to root to set permissions
USER root
RUN chmod +x /app/entrypoint.sh

# Switch back to non-root user
USER appuser

# Expose the network port
EXPOSE 8004

# Use entrypoint script for parameterized configuration
ENTRYPOINT ["/app/entrypoint.sh"]